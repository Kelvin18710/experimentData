/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 13 13:34:10 GMT 2024
 */

package org.apache.commons.math.analysis.solvers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.analysis.function.Atanh;
import org.apache.commons.math.analysis.function.*;
import org.apache.commons.math.analysis.function.Expm1;
import org.apache.commons.math.analysis.function.Gaussian;
import org.apache.commons.math.analysis.function.HarmonicOscillator;
import org.apache.commons.math.analysis.function.Identity;
import org.apache.commons.math.analysis.function.Log;
import org.apache.commons.math.analysis.function.Minus;
import org.apache.commons.math.analysis.function.Power;
import org.apache.commons.math.analysis.function.Sin;
import org.apache.commons.math.analysis.function.Sinc;
import org.apache.commons.math.analysis.function.Sqrt;
import org.apache.commons.math.analysis.function.Ulp;
import org.apache.commons.math.analysis.solvers.AllowedSolution;
import org.apache.commons.math.analysis.solvers.IllinoisSolver;
import org.apache.commons.math.analysis.solvers.PegasusSolver;
import org.apache.commons.math.analysis.solvers.RegulaFalsiSolver;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BaseSecantSolver_ESTest extends BaseSecantSolver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test_0000()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((-3.195E-320), (-2155.75201922));
      Atanh atanh0 = new Atanh();
      AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
      double double0 = regulaFalsiSolver0.solve(345, (UnivariateRealFunction) atanh0, 1033.34346, -0.0, (-1.5286E-320), allowedSolution0);
      assertEquals((-1.5286E-320), regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(-0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test_0001()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(0.0);
      Identity identity0 = new Identity();
      double double0 = illinoisSolver0.solve(1278, (UnivariateRealFunction) identity0, 0.0, 0.0, (-3126.19860943));
      assertEquals((-3126.19860943), illinoisSolver0.getStartValue(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test_0002()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((-2155.75201922));
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      Identity identity0 = new Identity();
      regulaFalsiSolver0.solve(2148, (UnivariateRealFunction) identity0, (-632.63), (double) 2148, allowedSolution0);
      double double0 = regulaFalsiSolver0.doSolve();
      assertEquals(757.6850000000001, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test_0003()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Expm1 expm1_0 = new Expm1();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      regulaFalsiSolver0.solve(2148, (UnivariateRealFunction) expm1_0, (-2204.55701), 1.0E-15, allowedSolution0);
      double double0 = regulaFalsiSolver0.doSolve();
      assertEquals((-1102.278505), regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-15, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test_0004()  throws Throwable  {
      Expm1 expm1_0 = new Expm1();
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((-128.11));
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      regulaFalsiSolver0.solve(419240386, (UnivariateRealFunction) expm1_0, (-2827.3), (double) 4, (-2042.96397526187), allowedSolution0);
      double double0 = regulaFalsiSolver0.doSolve();
      assertEquals((-2042.96397526187), regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals((-9.315300654815433E-16), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test_0005()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((-2155.75201922), (-2155.75201922), (-2155.75201922));
      Expm1 expm1_0 = new Expm1();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      // Undeclared exception!
      regulaFalsiSolver0.solve(9475329, (UnivariateRealFunction) expm1_0, (-515.0), 0.24197072451914337, allowedSolution0);
  }

  @Test(timeout = 4000)
  public void test_0006()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Sin sin0 = new Sin();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve((-409233796), (UnivariateRealFunction) sin0, 1.1102230246251565E-16, (double) 155, allowedSolution0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (-409,233,796) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test_0007()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Expm1 expm1_0 = new Expm1();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(944, (UnivariateRealFunction) expm1_0, 4.503599627370496E15, (double) 163, allowedSolution0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [4,503,599,627,370,496, 163]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test_0008()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      // Undeclared exception!
      try { 
        pegasusSolver0.solve(532, (UnivariateRealFunction) null, (double) 532, (double) 532, allowedSolution0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test_0009()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((-2155.75201922));
      Expm1 expm1_0 = new Expm1();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      // Undeclared exception!
      regulaFalsiSolver0.solve(9475299, (UnivariateRealFunction) expm1_0, (-2155.75201922), (double) 9475299, (double) 9475299, allowedSolution0);
  }

  @Test(timeout = 4000)
  public void test_0010()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Ulp ulp0 = new Ulp();
      AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve((-81), (UnivariateRealFunction) ulp0, 0.0, 0.0, 0.0, allowedSolution0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (-81) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test_0011()  throws Throwable  {
      Sin sin0 = new Sin();
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(2164, (UnivariateRealFunction) sin0, (double) 2164, (double) 2164, (double) 2164, allowedSolution0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [2,164, 2,164]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test_0012()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      // Undeclared exception!
      try { 
        pegasusSolver0.solve((-3622), (UnivariateRealFunction) null, (double) (-3622), (double) (-3622), (double) (-3622), allowedSolution0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test_0013()  throws Throwable  {
      Sin sin0 = new Sin();
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(2137, 2137, 2137);
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(2137, (UnivariateRealFunction) sin0, (-2.957007209750105E-8), (double) 2137, (-2.957007209750105E-8), (AllowedSolution) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseSecantSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test_0014()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(0.0, 0.0, 0.0);
      Log log0 = new Log();
      // Undeclared exception!
      regulaFalsiSolver0.solve(407993515, (UnivariateRealFunction) log0, 1.0E-6, (double) 407993515, 0.0);
  }

  @Test(timeout = 4000)
  public void test_0015()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Minus minus0 = new Minus();
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(1, (UnivariateRealFunction) minus0, (double) 1, (double) 1, (double) 1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (1) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test_0016()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Ulp ulp0 = new Ulp();
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(2148, (UnivariateRealFunction) ulp0, (-2204.55701), 1.0E-15, (-3.141592653589793));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // function values at endpoints do not have different signs, endpoints: [-2,204.557, 0], values: [0, 0]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test_0017()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      // Undeclared exception!
      try { 
        illinoisSolver0.doSolve();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test_0018()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Atanh atanh0 = new Atanh();
      regulaFalsiSolver0.setup(224, atanh0, 224, 224, 224);
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.doSolve();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [224, 224]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test_0019()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Power power0 = new Power(2);
      regulaFalsiSolver0.setup(2, power0, 2, 2563.181321, 2);
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.doSolve();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // function values at endpoints do not have different signs, endpoints: [2, 2,563.181], values: [4, 6,569,898.484]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test_0020()  throws Throwable  {
      Sin sin0 = new Sin();
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(2137, 2137, (-1.7168146928204135));
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = regulaFalsiSolver0.solve(2137, (UnivariateRealFunction) sin0, (-1.7168146928204135), (double) 2137, (-1.7168146928204135), allowedSolution0);
      assertEquals((-1.7168146928204135), regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(1283.4221414620922, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test_0021()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Sin sin0 = new Sin();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = regulaFalsiSolver0.solve(2164, (UnivariateRealFunction) sin0, (-0.010714690733195933), (double) 2164, (double) 2164, allowedSolution0);
      assertEquals(2164.0, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(1206.3715789784806, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test_0022()  throws Throwable  {
      Sin sin0 = new Sin();
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(2137);
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = regulaFalsiSolver0.solve(2137, (UnivariateRealFunction) sin0, (-0.010714690733195933), (double) 2137, (-0.010714690733195933), allowedSolution0);
      assertEquals((-0.010714690733195933), regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(34.27453166729265, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test_0023()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Sin sin0 = new Sin();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = regulaFalsiSolver0.solve(2164, (UnivariateRealFunction) sin0, (-0.010714690733195933), (double) 2164, (double) 2164, allowedSolution0);
      assertEquals(2164.0, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(1206.3715789784806, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test_0024()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Sin sin0 = new Sin();
      AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
      double double0 = regulaFalsiSolver0.solve(93, (UnivariateRealFunction) sin0, (double) 93, 3513.579748, (double) 93, allowedSolution0);
      assertEquals(93.0, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(3260.9731744262053, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test_0025()  throws Throwable  {
      Sin sin0 = new Sin();
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(2137, 2137, 2137);
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = regulaFalsiSolver0.solve(2137, (UnivariateRealFunction) sin0, (-0.010714690733195933), (double) 2137, (double) 2137, allowedSolution0);
      assertEquals(2137.0, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(34.27453166729265, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test_0026()  throws Throwable  {
      Sin sin0 = new Sin();
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(2137, 2137, 2137);
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = regulaFalsiSolver0.solve(2137, (UnivariateRealFunction) sin0, (-2.957007209750105E-8), (double) 2137, (-2.957007209750105E-8), allowedSolution0);
      assertEquals((-2.957007209750105E-8), regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(9.613392830942757E-5, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test_0027()  throws Throwable  {
      Sin sin0 = new Sin();
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(2137, 2137, 2137);
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = regulaFalsiSolver0.solve(2137, (UnivariateRealFunction) sin0, (-1.2790114587318577), (double) 2137, (-1.2790114587318577), allowedSolution0);
      assertEquals((-1.2790114587318577), regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(1266.8833147885518, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test_0028()  throws Throwable  {
      Sin sin0 = new Sin();
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = regulaFalsiSolver0.solve(2164, (UnivariateRealFunction) sin0, (-0.010714690733195933), 4.7289374060280415E-15, (double) 2164, allowedSolution0);
      assertEquals(2164.0, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(4.7289374060280415E-15, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test_0029()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      Sinc sinc0 = new Sinc();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = pegasusSolver0.solve(19, (UnivariateRealFunction) sinc0, (-2361.999695090788), (double) 19, (-2361.999695090788), allowedSolution0);
      assertEquals((-2361.999695090788), pegasusSolver0.getStartValue(), 0.01);
      assertEquals((-2189.6900794417716), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test_0030()  throws Throwable  {
      Sin sin0 = new Sin();
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(2137, 2137, 2137);
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = regulaFalsiSolver0.solve(2137, (UnivariateRealFunction) sin0, (-0.010714690733195933), (double) 2137, (-0.010714690733195933), allowedSolution0);
      assertEquals((-0.010714690733195933), regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals((-0.010714690733195933), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test_0031()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator(1.1102230246251565E-16, 3073.651837409642, 1.1102230246251565E-16);
      double double0 = illinoisSolver0.solve(1611, (UnivariateRealFunction) harmonicOscillator0, (-335.191472735438), (double) 1611, (-335.191472735438));
      assertEquals((-335.191472735438), illinoisSolver0.getStartValue(), 0.01);
      assertEquals((-80.23559619177922), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test_0032()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Gaussian gaussian0 = new Gaussian(1602.4578575365856, 3);
      double double0 = regulaFalsiSolver0.solve(3, (UnivariateRealFunction) gaussian0, (double) 3, (double) 3, (double) 3);
      assertEquals(3.0, regulaFalsiSolver0.getMax(), 0.01);
      assertEquals(3.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test_0033()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      Sinc sinc0 = new Sinc();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = pegasusSolver0.solve(762, (UnivariateRealFunction) sinc0, (-1934.0), (double) 762, allowedSolution0);
      assertEquals((-586.0), pegasusSolver0.getStartValue(), 0.01);
      assertEquals((-285.8849314822197), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test_0034()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      Sqrt sqrt0 = new Sqrt();
      // Undeclared exception!
      try { 
        pegasusSolver0.solve(1025, (UnivariateRealFunction) sqrt0, (double) 1025, (double) 1025, (double) 1025);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [1,025, 1,025]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }
@Test(timeout = 4000)
  public void test_0035()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Tan tan0 = new Tan();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(239, (UnivariateRealFunction) tan0, (-13.815510557964274), 1.0E-6, allowedSolution0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (239) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test_0036()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(1767.2, 1767.2, 1767.2);
      Cos cos0 = new Cos();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = regulaFalsiSolver0.solve(896, (UnivariateRealFunction) cos0, (-957.96758988326), 1.0, (double) 289, allowedSolution0);
      assertEquals(289.0, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals((-957.96758988326), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test_0037()  throws Throwable  {
      Tan tan0 = new Tan();
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(1767.2537448041708, 1767.2537448041708, 1767.2537448041708);
      double double0 = regulaFalsiSolver0.solve(2141186041, (UnivariateRealFunction) tan0, (-201.91232), 10.559419812433172, 1.0E-6);
      assertEquals(1.0E-6, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals((-128.22169653362744), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test_0038()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-216.88033042318), 3.0, 2024.2);
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      Log1p log1p0 = new Log1p();
      illinoisSolver0.solve(2147483634, (UnivariateRealFunction) log1p0, 0.0, (-2544.9147918), 2024.2, allowedSolution0);
      double double0 = illinoisSolver0.doSolve();
      assertEquals(2024.2, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test_0039()  throws Throwable  {
      Log log0 = new Log();
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(1767.2);
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      regulaFalsiSolver0.solve(289, (UnivariateRealFunction) log0, 0.0, (double) 289, allowedSolution0);
      double double0 = regulaFalsiSolver0.doSolve();
      assertEquals(144.5, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(289.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test_0040()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(1760.6101280604437, 1760.6101280604437, 1760.6101280604437);
      Cos cos0 = new Cos();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      regulaFalsiSolver0.solve(289, (UnivariateRealFunction) cos0, (-47.61598571474989), 0.0, allowedSolution0);
      double double0 = regulaFalsiSolver0.doSolve();
      assertEquals((-23.807992857374945), regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals((-47.61598571474989), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test_0041()  throws Throwable  {
      Log log0 = new Log();
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      // Undeclared exception!
      regulaFalsiSolver0.solve(Integer.MAX_VALUE, (UnivariateRealFunction) log0, 1.986821492305628E-8, 3011.229303398, allowedSolution0);
  }

  @Test(timeout = 4000)
  public void test_0042()  throws Throwable  {
      Log log0 = new Log();
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((-582.4802626), (-582.4802626), 185);
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(185, (UnivariateRealFunction) log0, 1.0E-6, 1.0E-6, allowedSolution0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [0, 0]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test_0043()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(364, (UnivariateRealFunction) null, (double) 364, (double) 364, allowedSolution0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test_0044()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(1767.2);
      Cos cos0 = new Cos();
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(284, (UnivariateRealFunction) cos0, (-47.61598571474989), 0.0, (AllowedSolution) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseSecantSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test_0045()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator((-3662.0), (-3662.0), 1073729866);
      UnivariateRealFunction univariateRealFunction0 = harmonicOscillator0.derivative();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      // Undeclared exception!
      regulaFalsiSolver0.solve(1073729866, univariateRealFunction0, 613.0641491705, (double) 1073729866, (-3662.0), allowedSolution0);
  }

  @Test(timeout = 4000)
  public void test_0046()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Abs abs0 = new Abs();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve((-775), (UnivariateRealFunction) abs0, (double) (-775), (double) (-775), (double) (-775), allowedSolution0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (-775) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test_0047()  throws Throwable  {
      Tan tan0 = new Tan();
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(1.0E-6, (-53.5560162), 2086759.20162601);
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(2, (UnivariateRealFunction) tan0, (-1254.39893), (-1341.678334832297), 259.08159541, allowedSolution0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [-1,254.399, -1,341.678]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test_0048()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(925671338, (UnivariateRealFunction) null, (double) 925671338, (double) 925671338, (double) 925671338, allowedSolution0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test_0049()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Logistic logistic0 = new Logistic(2668, 2668, 2668, 1.0557243132033076E9, (-32403.787588504398), 2668);
      // Undeclared exception!
      regulaFalsiSolver0.solve(2668, (UnivariateRealFunction) logistic0, (-32758.69557675044), 1.0557243132033076E9, 1.0557243132033076E9);
  }

  @Test(timeout = 4000)
  public void test_0050()  throws Throwable  {
      Log log0 = new Log();
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(1767.2);
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(468, (UnivariateRealFunction) log0, (-997.76707782869), 1767.2, (-997.76707782869));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // function values at endpoints do not have different signs, endpoints: [-997.767, 1,767.2], values: [\uFFFD, 7.477]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test_0051()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.doSolve();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test_0052()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Log10 log10_0 = new Log10();
      regulaFalsiSolver0.setup(787, log10_0, 787, 787, 9.519156414228291E-6);
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.doSolve();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [787, 787]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test_0053()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Tanh tanh0 = new Tanh();
      regulaFalsiSolver0.setup(59, tanh0, 59, 499.1998927164929, (-1.0));
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.doSolve();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // function values at endpoints do not have different signs, endpoints: [59, 499.2], values: [1, 1]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test_0054()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Tan tan0 = new Tan();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = regulaFalsiSolver0.solve(499, (UnivariateRealFunction) tan0, (-2927.6777120411284), (double) 499, allowedSolution0);
      assertEquals((-1214.3388560205642), regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals((-2907.544001328604), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test_0055()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Tan tan0 = new Tan();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = regulaFalsiSolver0.solve(403, (UnivariateRealFunction) tan0, (double) 403, 448.9, allowedSolution0);
      assertEquals(425.95, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(403.6946564392702, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test_0056()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Tan tan0 = new Tan();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = regulaFalsiSolver0.solve(403, (UnivariateRealFunction) tan0, (double) 403, 448.9, allowedSolution0);
      assertEquals(425.95, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(403.6946564392702, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test_0057()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Tan tan0 = new Tan();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = regulaFalsiSolver0.solve(374, (UnivariateRealFunction) tan0, (double) 374, 448.72062638602, allowedSolution0);
      assertEquals(411.36031319301003, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(375.420321157828, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test_0058()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Tan tan0 = new Tan();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = regulaFalsiSolver0.solve(998010115, (UnivariateRealFunction) tan0, (double) 470, (double) 998010115, allowedSolution0);
      assertEquals(4.990052925E8, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(9.801096872620064E8, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test_0059()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Tan tan0 = new Tan();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = regulaFalsiSolver0.solve(184, (UnivariateRealFunction) tan0, 0.8682332623254752, (double) 184, allowedSolution0);
      assertEquals(92.43411663116274, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(51.83627930699552, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test_0060()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Tan tan0 = new Tan();
      double double0 = regulaFalsiSolver0.solve(499, (UnivariateRealFunction) tan0, (-1004.5954948546963), (double) 499, (double) 499);
      assertEquals(499.0, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(365.9955449450634, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test_0061()  throws Throwable  {
      Tan tan0 = new Tan();
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(210.976668416182, 210.976668416182, 210.976668416182);
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = regulaFalsiSolver0.solve(1506, (UnivariateRealFunction) tan0, (-552.78674507), 3357.0, allowedSolution0);
      assertEquals(1402.106627465, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals((-444.8431351016743), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test_0062()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Tan tan0 = new Tan();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(1506, (UnivariateRealFunction) tan0, (-1.5574077246549023), 2.4384203044354907E-8, allowedSolution0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (1,506) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test_0063()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Tan tan0 = new Tan();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = regulaFalsiSolver0.solve(485, (UnivariateRealFunction) tan0, (-1.2153384398573506), 0.8682332627895448, allowedSolution0);
      assertEquals((-0.17355258853390287), regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(8.949730048532956E-16, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test_0064()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Tan tan0 = new Tan();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = regulaFalsiSolver0.solve(1506, (UnivariateRealFunction) tan0, (double) 499, (double) 1506, allowedSolution0);
      assertEquals(1002.5, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(1027.3007977238624, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test_0065()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Tan tan0 = new Tan();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(499, (UnivariateRealFunction) tan0, (double) 499, (double) 1506, allowedSolution0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (499) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test_0066()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Tan tan0 = new Tan();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = regulaFalsiSolver0.solve(499, (UnivariateRealFunction) tan0, (double) 499, (double) 1506, allowedSolution0);
      assertEquals(1002.5, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(1027.3007977238624, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test_0067()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Tan tan0 = new Tan();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(1506, (UnivariateRealFunction) tan0, (double) 499, (double) 1506, allowedSolution0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (1,506) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test_0068()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Sinh sinh0 = new Sinh();
      // Undeclared exception!
      try { 
        illinoisSolver0.solve(5, (UnivariateRealFunction) sinh0, (-2535.51), (double) 5, (-3188.029736553174));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (5) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test_0069()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Tan tan0 = new Tan();
      double double0 = regulaFalsiSolver0.solve(31656858, (UnivariateRealFunction) tan0, 1.5597596091152813E-25, (double) 31656858, 1.5597596091152813E-25);
      assertEquals(1.5597596091152813E-25, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test_0070()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Tan tan0 = new Tan();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = regulaFalsiSolver0.solve(185, (UnivariateRealFunction) tan0, 733.8, (double) 0, allowedSolution0);
      assertEquals(733.8, regulaFalsiSolver0.getMin(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test_0071()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(10.559419812433172, 1250.769);
      assertEquals(10.559419812433172, regulaFalsiSolver0.getRelativeAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test_0072()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(1767.2, 1767.2, 1767.2);
      Cos cos0 = new Cos();
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(5, (UnivariateRealFunction) cos0, 811.880359086, (-3389.0), (-47.61598571474989));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [811.88, -3,389]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test_0073()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      Cbrt cbrt0 = new Cbrt();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      pegasusSolver0.solve(118, (UnivariateRealFunction) cbrt0, (-733.21873167), (double) 118, (-733.21873167), allowedSolution0);
  }
@Test(timeout = 4000)
  public void test_0074()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver((-1634.616043704223));
      Cos cos0 = new Cos();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = pegasusSolver0.solve(2557, (UnivariateRealFunction) cos0, (-3.224223074537233E10), (-893.0426), (-3.224223074537233E10), allowedSolution0);
      assertEquals((-3.224223074537233E10), pegasusSolver0.getStartValue(), 0.01);
      assertEquals((-5.532395658874375E9), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test_0075()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(2057.399265);
      Inverse inverse0 = new Inverse();
      double double0 = pegasusSolver0.solve(1597, (UnivariateRealFunction) inverse0, (-2283.273074683), 1859.282, 10766.4717707634);
      assertEquals(10766.4717707634, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(1435.290925317, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test_0076()  throws Throwable  {
      AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
      PegasusSolver pegasusSolver0 = new PegasusSolver((-2780.22), (-2780.22), 32);
      Sinh sinh0 = new Sinh();
      pegasusSolver0.solve(32, (UnivariateRealFunction) sinh0, 0.0, (-2780.22), allowedSolution0);
      double double0 = pegasusSolver0.doSolve();
      assertEquals((-1390.11), pegasusSolver0.getStartValue(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test_0077()  throws Throwable  {
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(1.2958646899018938E-9);
      Sigmoid sigmoid0 = new Sigmoid((-807.7683024789936), 3.5445322665313116E11);
      illinoisSolver0.solve(Integer.MAX_VALUE, (UnivariateRealFunction) sigmoid0, (-2692.1179423), 0.5, allowedSolution0);
      double double0 = illinoisSolver0.doSolve();
      assertEquals((-1345.80897115), illinoisSolver0.getStartValue(), 0.01);
      assertEquals((-19.899566969436616), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test_0078()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      Atanh atanh0 = new Atanh();
      // Undeclared exception!
      illinoisSolver0.solve(238466, (UnivariateRealFunction) atanh0, (-1.0), 9.604535138857026E-8, allowedSolution0);
  }

  @Test(timeout = 4000)
  public void test_0079()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Cos cos0 = new Cos();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      // Undeclared exception!
      try { 
        illinoisSolver0.solve((-2464), (UnivariateRealFunction) cos0, (double) (-2464), (double) (-2464), allowedSolution0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (-2,464) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test_0080()  throws Throwable  {
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(1.2958646899018938E-9);
      Sigmoid sigmoid0 = new Sigmoid((-807.7683024789936), 3.5445322665313116E11);
      // Undeclared exception!
      try { 
        illinoisSolver0.solve(2068, (UnivariateRealFunction) sigmoid0, 0.5, (-807.7683024789936), allowedSolution0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [0.5, -807.768]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test_0081()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Cos cos0 = new Cos();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      // Undeclared exception!
      try { 
        illinoisSolver0.solve(5, (UnivariateRealFunction) cos0, 0.7889070291544, 39.26990816987241, allowedSolution0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // function values at endpoints do not have different signs, endpoints: [0.789, 39.27], values: [0.705, 0]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test_0082()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Tan tan0 = new Tan();
      AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
      // Undeclared exception!
      regulaFalsiSolver0.solve(389540616, (UnivariateRealFunction) tan0, (-2601.935250137), 45.31740915571721, 45.31740915571721, allowedSolution0);
  }

  @Test(timeout = 4000)
  public void test_0083()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Cos cos0 = new Cos();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve((-1870), (UnivariateRealFunction) cos0, (double) (-1870), (double) (-1870), (double) (-1870), allowedSolution0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (-1,870) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test_0084()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((-1634.616043704223));
      Inverse inverse0 = new Inverse();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(53, (UnivariateRealFunction) inverse0, 3.5420341094686253E-304, 1.3118644849883797E-306, (double) 53, allowedSolution0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [0, 0]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test_0085()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      // Undeclared exception!
      try { 
        illinoisSolver0.solve((-1631), (UnivariateRealFunction) null, (double) (-1631), (double) (-1631), (double) (-1631), allowedSolution0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test_0086()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Sin sin0 = new Sin();
      // Undeclared exception!
      regulaFalsiSolver0.solve(525439153, (UnivariateRealFunction) sin0, (-1168.8501308944008), (double) 525439153, (double) 525439153);
  }

  @Test(timeout = 4000)
  public void test_0087()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Cbrt cbrt0 = new Cbrt();
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve((-257), (UnivariateRealFunction) cbrt0, (double) (-257), (double) (-257), (double) (-257));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (-257) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test_0088()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(2057.399265);
      Inverse inverse0 = new Inverse();
      // Undeclared exception!
      try { 
        pegasusSolver0.solve(1597, (UnivariateRealFunction) inverse0, 5.32587432399021E7, (-628.7863683657338), (-606166.9838069673));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [53,258,743.24, -628.786]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test_0089()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      // Undeclared exception!
      try { 
        illinoisSolver0.solve(676, (UnivariateRealFunction) null, (double) 676, (double) 676, (double) 676);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test_0090()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      // Undeclared exception!
      try { 
        illinoisSolver0.doSolve();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test_0091()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Ulp ulp0 = new Ulp();
      illinoisSolver0.setup(288, ulp0, 288, 288, 288);
      // Undeclared exception!
      try { 
        illinoisSolver0.doSolve();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [288, 288]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test_0092()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Cbrt cbrt0 = new Cbrt();
      illinoisSolver0.setup(288, cbrt0, 0.5, 288, 288);
      // Undeclared exception!
      try { 
        illinoisSolver0.doSolve();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // function values at endpoints do not have different signs, endpoints: [0.5, 288], values: [0.794, 6.604]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test_0093()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Cos cos0 = new Cos();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = illinoisSolver0.solve(228, (UnivariateRealFunction) cos0, (double) 228, 2945.9093137397, allowedSolution0);
      assertEquals(228.0, illinoisSolver0.getMin(), 0.01);
      assertEquals(2166.1281346501623, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test_0094()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Cos cos0 = new Cos();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = illinoisSolver0.solve(248, (UnivariateRealFunction) cos0, 1.1761620995272954, (double) 248, allowedSolution0);
      assertEquals(1.1761620995272954, illinoisSolver0.getMin(), 0.01);
      assertEquals(234.04865269243962, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test_0095()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Cos cos0 = new Cos();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = illinoisSolver0.solve(228, (UnivariateRealFunction) cos0, (-1.0), (double) 228, allowedSolution0);
      assertEquals((-1.0), illinoisSolver0.getMin(), 0.01);
      assertEquals(39.26990816987241, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test_0096()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Cos cos0 = new Cos();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = illinoisSolver0.solve(228, (UnivariateRealFunction) cos0, 0.040253225145014504, (double) 228, allowedSolution0);
      assertEquals(0.040253225145014504, illinoisSolver0.getMin(), 0.01);
      assertEquals(1.570796422840248, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test_0097()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Cos cos0 = new Cos();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = illinoisSolver0.solve(228, (UnivariateRealFunction) cos0, (-1.0), (double) 228, allowedSolution0);
      assertEquals((-1.0), illinoisSolver0.getMin(), 0.01);
      assertEquals(39.26990816987241, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test_0098()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Cos cos0 = new Cos();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      illinoisSolver0.solve(228, (UnivariateRealFunction) cos0, (-1.0), (double) 228, allowedSolution0);
      double double0 = illinoisSolver0.doSolve();
      assertEquals((-1.0), illinoisSolver0.getMin(), 0.01);
      assertEquals(39.269908169872416, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test_0099()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Cos cos0 = new Cos();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = illinoisSolver0.solve(228, (UnivariateRealFunction) cos0, (-1.0), (double) 228, allowedSolution0);
      assertEquals((-1.0), illinoisSolver0.getMin(), 0.01);
      assertEquals(39.269908169872416, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test_0100()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Cos cos0 = new Cos();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = illinoisSolver0.solve(210, (UnivariateRealFunction) cos0, (-0.2057044504061175), (double) 210, allowedSolution0);
      assertEquals(104.89714777479695, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(51.83627878423159, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test_0101()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Cos cos0 = new Cos();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = illinoisSolver0.solve(210, (UnivariateRealFunction) cos0, 0.040253225145014504, (double) 210, allowedSolution0);
      assertEquals(0.040253225145014504, illinoisSolver0.getMin(), 0.01);
      assertEquals(1.5707963267948966, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test_0102()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Cos cos0 = new Cos();
      AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
      double double0 = illinoisSolver0.solve(228, (UnivariateRealFunction) cos0, (-1.0), (double) 228, allowedSolution0);
      assertEquals((-1.0), illinoisSolver0.getMin(), 0.01);
      assertEquals(39.269908169872416, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test_0103()  throws Throwable  {
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      PegasusSolver pegasusSolver0 = new PegasusSolver((-1634.616043704223));
      Cos cos0 = new Cos();
      double double0 = pegasusSolver0.solve(569, (UnivariateRealFunction) cos0, (-1634.616043704223), (double) 569, 860.26385, allowedSolution0);
      assertEquals(860.26385, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(227.76546738526, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test_0104()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(0.0);
      Atan atan0 = new Atan();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = regulaFalsiSolver0.solve(2826, (UnivariateRealFunction) atan0, (-1.5707963267948966), 2950.619052378772, (-399.4717364), allowedSolution0);
      assertEquals((-399.4717364), regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test_0105()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(0.0);
      Expm1 expm1_0 = new Expm1();
      double double0 = regulaFalsiSolver0.solve(5, (UnivariateRealFunction) expm1_0, (double) 5, 0.0, 400.6);
      assertEquals(400.6, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test_0106()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Sin sin0 = new Sin();
      double double0 = regulaFalsiSolver0.solve(1139, (UnivariateRealFunction) sin0, (-1169.29), (double) 1139, (double) 1139);
      assertEquals(1139.0, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals((-238.7610416728243), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test_0107()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(480.7086544132, 480.7086544132);
      assertEquals(480.7086544132, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test_0108()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Cos cos0 = new Cos();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      illinoisSolver0.solve(228, (UnivariateRealFunction) cos0, 0.07105989334959117, (double) 228, allowedSolution0);
  }
@Test(timeout = 4000)
  public void test_0109()  throws Throwable  {
      Tanh tanh0 = new Tanh();
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(0.0, (-2952.862039), (-2952.862039));
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = regulaFalsiSolver0.solve(633, (UnivariateRealFunction) tanh0, (-402.81068), 0.0, (-0.47771187783168273), allowedSolution0);
      assertEquals((-0.47771187783168273), regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test_0110()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Ceil ceil0 = new Ceil();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      regulaFalsiSolver0.solve(1088, (UnivariateRealFunction) ceil0, 2004.4970750224, 0.0, allowedSolution0);
      double double0 = regulaFalsiSolver0.doSolve();
      assertEquals(1002.2485375112, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test_0111()  throws Throwable  {
      Cos cos0 = new Cos();
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((-2276.0), (-0.7897862853702982));
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(1030, (UnivariateRealFunction) cos0, 0.5, 21.8137561739675, allowedSolution0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (1,030) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test_0112()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Sigmoid sigmoid0 = new Sigmoid();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      // Undeclared exception!
      try { 
        illinoisSolver0.solve(601570, (UnivariateRealFunction) sigmoid0, (double) 601570, (double) 601570, allowedSolution0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [601,570, 601,570]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test_0113()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      // Undeclared exception!
      try { 
        illinoisSolver0.solve(1029620319, (UnivariateRealFunction) null, (double) 1029620319, (double) 1029620319, allowedSolution0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test_0114()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Cos cos0 = new Cos();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      // Undeclared exception!
      regulaFalsiSolver0.solve(2017022893, (UnivariateRealFunction) cos0, 3138.52662123081, (double) 2017022893, (double) 2017022893, allowedSolution0);
  }

  @Test(timeout = 4000)
  public void test_0115()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Cos cos0 = new Cos();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(1030, (UnivariateRealFunction) cos0, (double) 1030, 1.4592631159349088, (-0.10824254480965934), allowedSolution0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [1,030, 1.459]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test_0116()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((-0.10824254480965934), 0.5, 0.5);
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(1023, (UnivariateRealFunction) null, (double) 1023, 0.5, (-0.10824254480965934), allowedSolution0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test_0117()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Cos cos0 = new Cos();
      // Undeclared exception!
      regulaFalsiSolver0.solve(384457379, (UnivariateRealFunction) cos0, 11.0540240986, (double) 384457379, (double) 384457379);
  }

  @Test(timeout = 4000)
  public void test_0118()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Sigmoid sigmoid0 = new Sigmoid();
      // Undeclared exception!
      try { 
        illinoisSolver0.solve((-2843), (UnivariateRealFunction) sigmoid0, (double) (-2843), (double) (-2843), (double) (-2843));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (-2,843) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test_0119()  throws Throwable  {
      Cos cos0 = new Cos();
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(808, (UnivariateRealFunction) cos0, 221.48228151634268, 0.39999997615814, (double) 808);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [221.482, 0.4]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test_0120()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      // Undeclared exception!
      try { 
        illinoisSolver0.solve((-988950870), (UnivariateRealFunction) null, (double) (-988950870), (double) (-988950870), (double) (-988950870));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test_0121()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      // Undeclared exception!
      try { 
        illinoisSolver0.doSolve();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test_0122()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Abs abs0 = new Abs();
      illinoisSolver0.setup(160437967, abs0, 160437967, 160437967, (-1830.353234));
      // Undeclared exception!
      try { 
        illinoisSolver0.doSolve();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [160,437,967, 160,437,967]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test_0123()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Cos cos0 = new Cos();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = regulaFalsiSolver0.solve(361, (UnivariateRealFunction) cos0, 1.298728293707121E-4, (double) 361, allowedSolution0);
      assertEquals(180.5000649364147, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(89.53539062730991, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test_0124()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Cos cos0 = new Cos();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = regulaFalsiSolver0.solve(1015, (UnivariateRealFunction) cos0, (-1164.39), 1.0, allowedSolution0);
      assertEquals((-581.695), regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals((-95.81857593448402), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test_0125()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Cos cos0 = new Cos();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = regulaFalsiSolver0.solve(273114418, (UnivariateRealFunction) cos0, (-1447.2484826), (-7.513553898366084), (-7.513553898366084), allowedSolution0);
      assertEquals((-7.513553898366084), regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals((-736.7034772668065), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test_0126()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Cos cos0 = new Cos();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = regulaFalsiSolver0.solve(205, (UnivariateRealFunction) cos0, 11.0540240986, 114.66813185602746, allowedSolution0);
      assertEquals(62.86107797731373, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(114.66813185602746, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test_0127()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Cos cos0 = new Cos();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = regulaFalsiSolver0.solve(192, (UnivariateRealFunction) cos0, (-0.2349), (double) 192, (double) 192, allowedSolution0);
      assertEquals(192.0, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(83.25220532013624, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test_0128()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Cos cos0 = new Cos();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      regulaFalsiSolver0.solve(1030, (UnivariateRealFunction) cos0, (-1164.39), 1.4592631159349088, allowedSolution0);
      double double0 = regulaFalsiSolver0.doSolve();
      assertEquals((-581.4653684420326), regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals((-887.4999249451885), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test_0129()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Cos cos0 = new Cos();
      double double0 = regulaFalsiSolver0.solve(1030, (UnivariateRealFunction) cos0, (-887.4999249451885), 0.3999999761581421, 0.3999999761581421);
      assertEquals(0.3999999761581421, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals((-887.4999246391166), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test_0130()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Cos cos0 = new Cos();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = regulaFalsiSolver0.solve(191, (UnivariateRealFunction) cos0, (-12.27782), (double) 191, allowedSolution0);
      assertEquals(89.36108999999999, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(51.83627878423159, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test_0131()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Tanh tanh0 = new Tanh();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = regulaFalsiSolver0.solve(2017022893, (UnivariateRealFunction) tanh0, (-2190.65629168112), 0.5, 34.514205926794, allowedSolution0);
      assertEquals(34.514205926794, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals((-3.7998941915760955E-17), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test_0132()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(1.0, 1.0, 1.0);
      Cos cos0 = new Cos();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = regulaFalsiSolver0.solve(1023, (UnivariateRealFunction) cos0, (-1164.39), 1.0, allowedSolution0);
      assertEquals((-581.695), regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals((-95.80651550932049), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test_0133()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Cos cos0 = new Cos();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      // Undeclared exception!
      regulaFalsiSolver0.solve(219354248, (UnivariateRealFunction) cos0, 0.9210610032873416, 1.7031269094513846, allowedSolution0);
  }

  @Test(timeout = 4000)
  public void test_0134()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((-2372.2771));
      Sinc sinc0 = new Sinc();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(57, (UnivariateRealFunction) sinc0, (-2372.2771), (double) 57, 0.2711307874283193, allowedSolution0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (57) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test_0135()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Log10 log10_0 = new Log10();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = illinoisSolver0.solve(1060, (UnivariateRealFunction) log10_0, 0.008336750013465571, (double) 1060, allowedSolution0);
      assertEquals(530.0041683750067, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(0.9999999999999998, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test_0136()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Cos cos0 = new Cos();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = illinoisSolver0.solve(1745, (UnivariateRealFunction) cos0, (-1.0), (double) 1745, allowedSolution0);
      assertEquals(872.0, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(1742.0131264155402, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test_0137()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      Log10 log10_0 = new Log10();
      double double0 = pegasusSolver0.solve(2404, (UnivariateRealFunction) log10_0, 0.07198704738768208, (double) 2404, (-647.0777));
      assertEquals((-647.0777), pegasusSolver0.getStartValue(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test_0138()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(1630.0, 1630.0);
      Tanh tanh0 = new Tanh();
      double double0 = pegasusSolver0.solve(5, (UnivariateRealFunction) tanh0, 1.0, (double) 0, 0.11642422257775317);
      assertEquals(1.0, pegasusSolver0.getMin(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test_0139()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      Gaussian gaussian0 = new Gaussian();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = pegasusSolver0.solve(242, (UnivariateRealFunction) gaussian0, (double) 242, (double) 242, allowedSolution0);
      assertEquals(242.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(242.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test_0140()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Cos cos0 = new Cos();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = regulaFalsiSolver0.solve(354, (UnivariateRealFunction) cos0, 11.05, (double) 354, allowedSolution0);
      assertEquals(182.525, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(45.5530934770464, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test_0141()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(0.3999999761581421, (-1.0));
      Log log0 = new Log();
      pegasusSolver0.setup(458054555, log0, 1.1222930124693884E-7, 0.3999999761581421, 1024.0);
      // Undeclared exception!
      try { 
        pegasusSolver0.doSolve();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // function values at endpoints do not have different signs, endpoints: [0, 0.4], values: [-16.003, -0.916]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test_0142()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(1.0, 0.5, (-53.0843));
      Gaussian gaussian0 = new Gaussian(547.0686721989497, 140.48253429489603);
      UnivariateRealFunction univariateRealFunction0 = gaussian0.derivative();
      regulaFalsiSolver0.solve(1023, univariateRealFunction0, 1.0, (double) 1023, (-53.0843));
      double double0 = regulaFalsiSolver0.doSolve();
      assertEquals(1.0, regulaFalsiSolver0.getMin(), 0.01);
      assertEquals(897.2095228963766, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test_0143()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Cos cos0 = new Cos();
      regulaFalsiSolver0.solve(354, (UnivariateRealFunction) cos0, 11.05, (double) 354, (double) 354);
  }
@Test(timeout = 4000)
  public void test_0144()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(0.0, 1743.467861779674);
      Signum signum0 = new Signum();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = regulaFalsiSolver0.solve(1523528627, (UnivariateRealFunction) signum0, 0.0, (-1716.606278685), allowedSolution0);
      assertEquals((-858.3031393425), regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test_0145()  throws Throwable  {
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      PegasusSolver pegasusSolver0 = new PegasusSolver(1743.467861779674, 0.028363031018872793);
      Identity identity0 = new Identity();
      double double0 = pegasusSolver0.solve(197, (UnivariateRealFunction) identity0, 0.0, 1743.467861779674, 0.028363031018872793, allowedSolution0);
      assertEquals(0.028363031018872793, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test_0146()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(0.0);
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator(0.0, 1360.04792230547, 1360.04792230547);
      double double0 = regulaFalsiSolver0.solve(1791447204, (UnivariateRealFunction) harmonicOscillator0, 3.814697265625E-6, 3.814697265625E-6, 1360.04792230547);
      assertEquals(1360.04792230547, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(3.814697265625E-6, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test_0147()  throws Throwable  {
      Atan atan0 = new Atan();
      PegasusSolver pegasusSolver0 = new PegasusSolver((-5104.650909), (-3839.38), (-5104.650909));
      pegasusSolver0.solve(47, (UnivariateRealFunction) atan0, (-3839.38), (double) 47, (-1210.37391));
      double double0 = pegasusSolver0.doSolve();
      assertEquals((-1210.37391), pegasusSolver0.getStartValue(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test_0148()  throws Throwable  {
      Atan atan0 = new Atan();
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve((-896), (UnivariateRealFunction) atan0, (double) (-896), (double) (-896), allowedSolution0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (-896) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test_0149()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Atan atan0 = new Atan();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(1506, (UnivariateRealFunction) atan0, 1150.0496, 730.48892, allowedSolution0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [1,150.05, 730.489]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test_0150()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
      // Undeclared exception!
      try { 
        illinoisSolver0.solve(2, (UnivariateRealFunction) null, (double) 2, (double) 2, allowedSolution0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test_0151()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Atan atan0 = new Atan();
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(54710353, (UnivariateRealFunction) atan0, (-1704.0630079), 0.01745329052209854, (AllowedSolution) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseSecantSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test_0152()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      Sinc sinc0 = new Sinc();
      // Undeclared exception!
      regulaFalsiSolver0.solve(337406894, (UnivariateRealFunction) sinc0, (-1060.80617), 1724.4179, 1.0E-6, allowedSolution0);
  }

  @Test(timeout = 4000)
  public void test_0153()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      Tan tan0 = new Tan();
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(1506, (UnivariateRealFunction) tan0, (-9.588234830489824E-10), 0.01745329052209854, 0.01745329052209854, allowedSolution0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (1,506) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test_0154()  throws Throwable  {
      Atan atan0 = new Atan();
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(950432900, (UnivariateRealFunction) atan0, (double) 950432900, (double) 950432900, (double) 950432900, allowedSolution0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [950,432,900, 950,432,900]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test_0155()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
      // Undeclared exception!
      try { 
        pegasusSolver0.solve(905292854, (UnivariateRealFunction) null, (double) 905292854, (double) 905292854, (double) 905292854, allowedSolution0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test_0156()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Atan atan0 = new Atan();
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve((-3370), (UnivariateRealFunction) atan0, (double) (-3370), (double) (-3370), (double) (-3370));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (-3,370) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test_0157()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Atan atan0 = new Atan();
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(1503, (UnivariateRealFunction) atan0, (double) 1503, (double) 1503, (double) 1503);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [1,503, 1,503]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test_0158()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      // Undeclared exception!
      try { 
        pegasusSolver0.solve((-2818), (UnivariateRealFunction) null, (double) (-2818), (double) (-2818), (double) (-2818));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test_0159()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.doSolve();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test_0160()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Log log0 = new Log();
      illinoisSolver0.setup(1401, log0, 1401, 1401, 1401);
      // Undeclared exception!
      try { 
        illinoisSolver0.doSolve();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [1,401, 1,401]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test_0161()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Sinc sinc0 = new Sinc();
      regulaFalsiSolver0.setup(41, sinc0, 41, 5144.86338, 5144.86338);
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.doSolve();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // function values at endpoints do not have different signs, endpoints: [41, 5,144.863], values: [-0.004, -0]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test_0162()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Atan atan0 = new Atan();
      double double0 = regulaFalsiSolver0.solve(1503, (UnivariateRealFunction) atan0, (-3839.38), (double) 1503, (double) 1503);
      assertEquals(1503.0, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals((-5.878517841785701E-18), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test_0163()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Atan atan0 = new Atan();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = regulaFalsiSolver0.solve(925686548, (UnivariateRealFunction) atan0, (-3743.9449950255957), (double) 925686548, allowedSolution0);
      assertEquals(4.628414020275025E8, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(1.1127372725224915E-13, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test_0164()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Atan atan0 = new Atan();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = regulaFalsiSolver0.solve(1506, (UnivariateRealFunction) atan0, (-2240.700906868405), (double) 1506, (double) 1506, allowedSolution0);
      assertEquals(1506.0, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals((-1.858064641812385E-15), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test_0165()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Atan atan0 = new Atan();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = regulaFalsiSolver0.solve(5, (UnivariateRealFunction) atan0, (-2.957007209750105E-8), (double) 5, (-2.957007209750105E-8), allowedSolution0);
      assertEquals((-2.957007209750105E-8), regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(7.808267099562727E-8, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test_0166()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Atan atan0 = new Atan();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = regulaFalsiSolver0.solve(426, (UnivariateRealFunction) atan0, (-2252.771534725081), 2701.57, (double) 426, allowedSolution0);
      assertEquals(426.0, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals((-5.836935263281402E-14), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test_0167()  throws Throwable  {
      Atan atan0 = new Atan();
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((-5.540162278728578), (-5.540162278728578));
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = regulaFalsiSolver0.solve(470, (UnivariateRealFunction) atan0, (-5.540162278728578), (double) 470, allowedSolution0);
      assertEquals(232.2299188606357, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(8.661061650602533E-26, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test_0168()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Atan atan0 = new Atan();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = regulaFalsiSolver0.solve(1506, (UnivariateRealFunction) atan0, (-1699.3619150858653), (double) 1506, allowedSolution0);
      assertEquals((-96.68095754293267), regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals((-3.226456753354298E-21), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test_0169()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Atan atan0 = new Atan();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = regulaFalsiSolver0.solve(1694, (UnivariateRealFunction) atan0, (-3416.289738390178), (double) 1694, (double) 1694, allowedSolution0);
      assertEquals(1694.0, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(8.53312734443741E-24, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test_0170()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Atan atan0 = new Atan();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = regulaFalsiSolver0.solve(950432912, (UnivariateRealFunction) atan0, (-467.1952533471266), (double) 950432912, 374.2880425153556, allowedSolution0);
      assertEquals(374.2880425153556, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals((-3.2214820296062006E-8), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test_0171()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Atan atan0 = new Atan();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = regulaFalsiSolver0.solve(925686554, (UnivariateRealFunction) atan0, (-3743.5399927708436), (double) 925686554, allowedSolution0);
      assertEquals(4.6284140523000365E8, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(6.0465131534324825E-12, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test_0172()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Atan atan0 = new Atan();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      regulaFalsiSolver0.solve(1506, (UnivariateRealFunction) atan0, (-1704.0630079), 0.01745329052209854, allowedSolution0);
      double double0 = regulaFalsiSolver0.doSolve();
      assertEquals((-852.022777304739), regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(2.0101941044056064E-8, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test_0173()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Atan atan0 = new Atan();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = regulaFalsiSolver0.solve(925686548, (UnivariateRealFunction) atan0, (-821.0855632719246), (double) 925686548, allowedSolution0);
      assertEquals(4.628428634572184E8, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals((-8.316556596669396E-17), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test_0174()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Log log0 = new Log();
      // Undeclared exception!
      regulaFalsiSolver0.solve(134217729, (UnivariateRealFunction) log0, 1.0E-6, 2.4099306955791095, 2.4099306955791095);
  }

  @Test(timeout = 4000)
  public void test_0175()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      Logit logit0 = new Logit(2.010194104405606E-8, 977.7828195882897);
      AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
      // Undeclared exception!
      pegasusSolver0.solve(1435692283, (UnivariateRealFunction) logit0, 2.010194104405606E-8, 977.7828195882897, allowedSolution0);
  }

  @Test(timeout = 4000)
  public void test_0176()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Tan tan0 = new Tan();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = illinoisSolver0.solve(189, (UnivariateRealFunction) tan0, (double) 189, 882.0, (double) 189, allowedSolution0);
      assertEquals(189.0, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(881.2167389337687, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test_0177()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Atan atan0 = new Atan();
      double double0 = regulaFalsiSolver0.solve(285, (UnivariateRealFunction) atan0, (double) 285, 0.0, (double) 285);
      assertEquals(285.0, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test_0178()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Atan atan0 = new Atan();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      regulaFalsiSolver0.solve(427924, (UnivariateRealFunction) atan0, (-1704.0630079), (double) 427924, allowedSolution0);
      double double0 = regulaFalsiSolver0.doSolve();
      assertEquals(213109.96849605002, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals((-3.2579171938072315E-13), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test_0179()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Atan atan0 = new Atan();
      regulaFalsiSolver0.solve(1508, (UnivariateRealFunction) atan0, (-3838.26091913039), (double) 1508, (double) 1508);
  }
}
