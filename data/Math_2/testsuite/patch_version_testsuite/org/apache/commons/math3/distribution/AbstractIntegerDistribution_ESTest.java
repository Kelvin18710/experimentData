/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 13 12:07:31 GMT 2024
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.BinomialDistribution;
import org.apache.commons.math3.distribution.PascalDistribution;
import org.apache.commons.math3.distribution.PoissonDistribution;
import org.apache.commons.math3.distribution.ZipfDistribution;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractIntegerDistribution_ESTest extends AbstractIntegerDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test_0000()  throws Throwable  {
      BinomialDistribution binomialDistribution0 = new BinomialDistribution(0, 0);
      // Undeclared exception!
      try { 
        binomialDistribution0.sample(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (0)
         //
         verifyException("org.apache.commons.math.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test_0001()  throws Throwable  {
      BinomialDistribution binomialDistribution0 = new BinomialDistribution(0, 0);
      int int0 = binomialDistribution0.sample();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test_0002()  throws Throwable  {
      ZipfDistribution zipfDistribution0 = new ZipfDistribution(2, 760.58282267328);
      int int0 = zipfDistribution0.sample();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test_0003()  throws Throwable  {
      ZipfDistribution zipfDistribution0 = new ZipfDistribution(1, 1);
      int int0 = zipfDistribution0.inverseCumulativeProbability(1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test_0004()  throws Throwable  {
      BinomialDistribution binomialDistribution0 = new BinomialDistribution(0, 0);
      int int0 = binomialDistribution0.inverseCumulativeProbability(0.9894658721293068);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test_0005()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(0.9166120213290638, (double) 5);
      double double0 = poissonDistribution0.cumulativeProbability(1049465365, 1049465365);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test_0006()  throws Throwable  {
      BinomialDistribution binomialDistribution0 = new BinomialDistribution(0, 0);
      double double0 = binomialDistribution0.cumulativeProbability(0, 0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test_0007()  throws Throwable  {
      PascalDistribution pascalDistribution0 = new PascalDistribution(0, 0);
      // Undeclared exception!
      try { 
        pascalDistribution0.sample();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Discrete cumulative probability function returned NaN for argument 1,073,741,822
         //
         verifyException("org.apache.commons.math.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test_0008()  throws Throwable  {
      ZipfDistribution zipfDistribution0 = new ZipfDistribution(1414, 1414);
      // Undeclared exception!
      zipfDistribution0.inverseCumulativeProbability(6.308649765138419E-287);
  }

  @Test(timeout = 4000)
  public void test_0009()  throws Throwable  {
      ZipfDistribution zipfDistribution0 = new ZipfDistribution(2, Double.NaN);
      // Undeclared exception!
      try { 
        zipfDistribution0.inverseCumulativeProbability(0.5063726818916559);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Discrete cumulative probability function returned NaN for argument 1
         //
         verifyException("org.apache.commons.math.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test_0010()  throws Throwable  {
      ZipfDistribution zipfDistribution0 = new ZipfDistribution(479172383, 479172383);
      // Undeclared exception!
      zipfDistribution0.cumulativeProbability(479172383, 479172383);
  }

  @Test(timeout = 4000)
  public void test_0011()  throws Throwable  {
      BinomialDistribution binomialDistribution0 = new BinomialDistribution(2, 0.6415454149246216);
      int int0 = binomialDistribution0.inverseCumulativeProbability(0.8241350200906419);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test_0012()  throws Throwable  {
      ZipfDistribution zipfDistribution0 = new ZipfDistribution(154, 154);
      int int0 = zipfDistribution0.inverseCumulativeProbability(0.0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test_0013()  throws Throwable  {
      ZipfDistribution zipfDistribution0 = new ZipfDistribution(190, 190);
      // Undeclared exception!
      zipfDistribution0.sample();
  }

  @Test(timeout = 4000)
  public void test_0014()  throws Throwable  {
      ZipfDistribution zipfDistribution0 = new ZipfDistribution(2, Double.NaN);
      // Undeclared exception!
      try { 
        zipfDistribution0.sample(2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Discrete cumulative probability function returned NaN for argument 1
         //
         verifyException("org.apache.commons.math.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test_0015()  throws Throwable  {
      BinomialDistribution binomialDistribution0 = new BinomialDistribution(2, 0.6415454149246216);
      // Undeclared exception!
      try { 
        binomialDistribution0.sample((-379));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-379)
         //
         verifyException("org.apache.commons.math.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test_0016()  throws Throwable  {
      BinomialDistribution binomialDistribution0 = new BinomialDistribution(2, 0.14632591619493862);
      int[] intArray0 = binomialDistribution0.sample(2);
      assertArrayEquals(new int[] {1, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test_0017()  throws Throwable  {
      ZipfDistribution zipfDistribution0 = new ZipfDistribution(9, 9);
      // Undeclared exception!
      try { 
        zipfDistribution0.inverseCumulativeProbability(9);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9 out of [0, 1] range
         //
         verifyException("org.apache.commons.math.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test_0018()  throws Throwable  {
      ZipfDistribution zipfDistribution0 = new ZipfDistribution(1, 1);
      // Undeclared exception!
      try { 
        zipfDistribution0.inverseCumulativeProbability((-1017.10411897));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,017.104 out of [0, 1] range
         //
         verifyException("org.apache.commons.math.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test_0019()  throws Throwable  {
      ZipfDistribution zipfDistribution0 = new ZipfDistribution(1, 1);
      // Undeclared exception!
      try { 
        zipfDistribution0.cumulativeProbability(1, (-1493));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lower endpoint (-1,493) must be less than or equal to upper endpoint (1)
         //
         verifyException("org.apache.commons.math.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test_0020()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(230.29995566, 1);
      // Undeclared exception!
      try { 
        poissonDistribution0.cumulativeProbability(0, 1531);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (1) exceeded
         //
         verifyException("org.apache.commons.math.special.Gamma", e);
      }
  }

  @Test(timeout = 4000)
  public void test_0021()  throws Throwable  {
      BinomialDistribution binomialDistribution0 = new BinomialDistribution(0, 0);
      binomialDistribution0.reseedRandomGenerator(0);
      assertEquals(0, binomialDistribution0.getSupportUpperBound());
  }

  @Test(timeout = 4000)
  public void test_0022()  throws Throwable  {
      ZipfDistribution zipfDistribution0 = new ZipfDistribution(154, 154);
      // Undeclared exception!
      zipfDistribution0.sample(154);
  }
@Test(timeout = 4000)
  public void test_0023()  throws Throwable  {
      ZipfDistribution zipfDistribution0 = new ZipfDistribution(Integer.MAX_VALUE, 0.47224692692097126);
      // Undeclared exception!
      try { 
        zipfDistribution0.sample(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (0)
         //
         verifyException("org.apache.commons.math.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test_0024()  throws Throwable  {
      BinomialDistribution binomialDistribution0 = new BinomialDistribution(Integer.MAX_VALUE, 0.8260268300406122);
      // Undeclared exception!
      binomialDistribution0.sample(405);
  }

  @Test(timeout = 4000)
  public void test_0025()  throws Throwable  {
      PascalDistribution pascalDistribution0 = new PascalDistribution(1, 1);
      int int0 = pascalDistribution0.sample();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test_0026()  throws Throwable  {
      ZipfDistribution zipfDistribution0 = new ZipfDistribution(10, 10);
      int int0 = zipfDistribution0.inverseCumulativeProbability(0.0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test_0027()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(0.4264049649685464, 817);
      int int0 = poissonDistribution0.inverseCumulativeProbability(0.596041646520109);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test_0028()  throws Throwable  {
      PascalDistribution pascalDistribution0 = new PascalDistribution(150, 0.0);
      double double0 = pascalDistribution0.cumulativeProbability((-993), 0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test_0029()  throws Throwable  {
      ZipfDistribution zipfDistribution0 = new ZipfDistribution(5, 5);
      // Undeclared exception!
      zipfDistribution0.sample(1175);
  }

  @Test(timeout = 4000)
  public void test_0030()  throws Throwable  {
      ZipfDistribution zipfDistribution0 = new ZipfDistribution(299, 299);
      // Undeclared exception!
      zipfDistribution0.sample();
  }

  @Test(timeout = 4000)
  public void test_0031()  throws Throwable  {
      ZipfDistribution zipfDistribution0 = new ZipfDistribution(10, Double.NaN);
      // Undeclared exception!
      try { 
        zipfDistribution0.sample();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Discrete cumulative probability function returned NaN for argument 5
         //
         verifyException("org.apache.commons.math.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test_0032()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(Double.NaN, 3720);
      // Undeclared exception!
      try { 
        poissonDistribution0.sample();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test_0033()  throws Throwable  {
      ZipfDistribution zipfDistribution0 = new ZipfDistribution(963, 963);
      // Undeclared exception!
      zipfDistribution0.inverseCumulativeProbability(0.5535245161026595);
  }

  @Test(timeout = 4000)
  public void test_0034()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(Double.NaN, Double.NaN);
      // Undeclared exception!
      try { 
        poissonDistribution0.inverseCumulativeProbability(Double.NaN);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Discrete cumulative probability function returned NaN for argument 1,073,741,823
         //
         verifyException("org.apache.commons.math.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test_0035()  throws Throwable  {
      ZipfDistribution zipfDistribution0 = new ZipfDistribution(2800, 2800);
      // Undeclared exception!
      zipfDistribution0.cumulativeProbability(2800, 2800);
  }

  @Test(timeout = 4000)
  public void test_0036()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(0.34923300157543213, 1.2264227867126465, (-815));
      // Undeclared exception!
      try { 
        poissonDistribution0.cumulativeProbability(313, 313);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (-815) exceeded
         //
         verifyException("org.apache.commons.math.special.Gamma", e);
      }
  }

  @Test(timeout = 4000)
  public void test_0037()  throws Throwable  {
      ZipfDistribution zipfDistribution0 = new ZipfDistribution(5, 5);
      int int0 = zipfDistribution0.inverseCumulativeProbability(1);
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test_0038()  throws Throwable  {
      ZipfDistribution zipfDistribution0 = new ZipfDistribution(5, 5);
      int int0 = zipfDistribution0.sample();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test_0039()  throws Throwable  {
      ZipfDistribution zipfDistribution0 = new ZipfDistribution(237, 237);
      // Undeclared exception!
      try { 
        zipfDistribution0.sample(237);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Discrete cumulative probability function returned NaN for argument 118
         //
         verifyException("org.apache.commons.math.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test_0040()  throws Throwable  {
      BinomialDistribution binomialDistribution0 = new BinomialDistribution(784, 0.12980841898165818);
      // Undeclared exception!
      try { 
        binomialDistribution0.sample((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-1)
         //
         verifyException("org.apache.commons.math.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test_0041()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(1518.849497);
      // Undeclared exception!
      try { 
        poissonDistribution0.inverseCumulativeProbability(1518.849497);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1,518.849 out of [0, 1] range
         //
         verifyException("org.apache.commons.math.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test_0042()  throws Throwable  {
      ZipfDistribution zipfDistribution0 = new ZipfDistribution(963, 963);
      // Undeclared exception!
      try { 
        zipfDistribution0.inverseCumulativeProbability((-1371.7852143));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,371.785 out of [0, 1] range
         //
         verifyException("org.apache.commons.math.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test_0043()  throws Throwable  {
      ZipfDistribution zipfDistribution0 = new ZipfDistribution(963, 963);
      // Undeclared exception!
      try { 
        zipfDistribution0.cumulativeProbability(963, (-1018791306));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lower endpoint (-1,018,791,306) must be less than or equal to upper endpoint (963)
         //
         verifyException("org.apache.commons.math.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test_0044()  throws Throwable  {
      ZipfDistribution zipfDistribution0 = new ZipfDistribution(5, 5);
      double double0 = zipfDistribution0.cumulativeProbability(5, 5);
      assertEquals(3.086831244727417E-4, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test_0045()  throws Throwable  {
      ZipfDistribution zipfDistribution0 = new ZipfDistribution(5, 5);
      zipfDistribution0.reseedRandomGenerator(5);
      assertEquals(5, zipfDistribution0.getSupportUpperBound());
  }

  @Test(timeout = 4000)
  public void test_0046()  throws Throwable  {
      ZipfDistribution zipfDistribution0 = new ZipfDistribution(3, 3);
      int[] intArray0 = zipfDistribution0.sample(3);
      //  // Unstable assertion: assertArrayEquals(new int[] {1, 3, 1}, intArray0);
  }
@Test(timeout = 4000)
  public void test_0047()  throws Throwable  {
      PascalDistribution pascalDistribution0 = new PascalDistribution(65, 0.0);
      // Undeclared exception!
      try { 
        pascalDistribution0.sample((-685));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-685)
         //
         verifyException("org.apache.commons.math.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test_0048()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(0.7888617987519313, 0.30714685090558613, 2667);
      int int0 = poissonDistribution0.inverseCumulativeProbability(1.0);
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test_0049()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(2069.158964356508, Double.NaN);
      double double0 = poissonDistribution0.cumulativeProbability(0, 2441);
      assertEquals(0.9999999999999999, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test_0050()  throws Throwable  {
      BinomialDistribution binomialDistribution0 = new BinomialDistribution(0, 0);
      int int0 = binomialDistribution0.sample();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test_0051()  throws Throwable  {
      BinomialDistribution binomialDistribution0 = new BinomialDistribution(482, 0.6399354212151309);
      int int0 = binomialDistribution0.sample();
      assertEquals(322, int0);
  }

  @Test(timeout = 4000)
  public void test_0052()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(1, 0.6460106863851498, 270);
      int int0 = poissonDistribution0.inverseCumulativeProbability(0.6460106863851498);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test_0053()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(653, 954.6, 458);
      int int0 = poissonDistribution0.inverseCumulativeProbability(0L);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test_0054()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(2);
      double double0 = poissonDistribution0.cumulativeProbability(2, 2);
      assertEquals(0.2706705664731669, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test_0055()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(460.32823534);
      // Undeclared exception!
      poissonDistribution0.sample(131070);
  }

  @Test(timeout = 4000)
  public void test_0056()  throws Throwable  {
      PascalDistribution pascalDistribution0 = new PascalDistribution(0, 0);
      // Undeclared exception!
      try { 
        pascalDistribution0.sample();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Discrete cumulative probability function returned NaN for argument 1,073,741,822
         //
         verifyException("org.apache.commons.math.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test_0057()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(0.33050553915757436, (-1314.025789989577));
      // Undeclared exception!
      poissonDistribution0.inverseCumulativeProbability(0.33050553915757436);
  }

  @Test(timeout = 4000)
  public void test_0058()  throws Throwable  {
      ZipfDistribution zipfDistribution0 = new ZipfDistribution(1364, 1364);
      // Undeclared exception!
      zipfDistribution0.cumulativeProbability(1364, 1364);
  }

  @Test(timeout = 4000)
  public void test_0059()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution((double) 1, 1);
      // Undeclared exception!
      try { 
        poissonDistribution0.cumulativeProbability(1, 1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (1) exceeded
         //
         verifyException("org.apache.commons.math.special.Gamma", e);
      }
  }

  @Test(timeout = 4000)
  public void test_0060()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution((double) 1, 1);
      // Undeclared exception!
      try { 
        poissonDistribution0.inverseCumulativeProbability(1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (1) exceeded
         //
         verifyException("org.apache.commons.math.special.Gamma", e);
      }
  }

  @Test(timeout = 4000)
  public void test_0061()  throws Throwable  {
      ZipfDistribution zipfDistribution0 = new ZipfDistribution(282, 282);
      // Undeclared exception!
      zipfDistribution0.sample();
  }

  @Test(timeout = 4000)
  public void test_0062()  throws Throwable  {
      PascalDistribution pascalDistribution0 = new PascalDistribution(2, Double.NaN);
      // Undeclared exception!
      try { 
        pascalDistribution0.sample(2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Discrete cumulative probability function returned NaN for argument 1,073,741,822
         //
         verifyException("org.apache.commons.math.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test_0063()  throws Throwable  {
      PascalDistribution pascalDistribution0 = new PascalDistribution(0, 0);
      // Undeclared exception!
      try { 
        pascalDistribution0.sample(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (0)
         //
         verifyException("org.apache.commons.math.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test_0064()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(2654, 2654, 2654);
      // Undeclared exception!
      try { 
        poissonDistribution0.inverseCumulativeProbability(2654);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2,654 out of [0, 1] range
         //
         verifyException("org.apache.commons.math.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test_0065()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(0.8961863401537935);
      // Undeclared exception!
      try { 
        poissonDistribution0.inverseCumulativeProbability((-1116.776));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,116.776 out of [0, 1] range
         //
         verifyException("org.apache.commons.math.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test_0066()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(1);
      // Undeclared exception!
      try { 
        poissonDistribution0.cumulativeProbability(1, (-504));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lower endpoint (-504) must be less than or equal to upper endpoint (1)
         //
         verifyException("org.apache.commons.math.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test_0067()  throws Throwable  {
      ZipfDistribution zipfDistribution0 = new ZipfDistribution(653, 653);
      double double0 = zipfDistribution0.cumulativeProbability(653, 653);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test_0068()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(1, 0.6460106863851498, 270);
      poissonDistribution0.reseedRandomGenerator(765L);
      assertEquals(Integer.MAX_VALUE, poissonDistribution0.getSupportUpperBound());
  }

  @Test(timeout = 4000)
  public void test_0069()  throws Throwable  {
      PascalDistribution pascalDistribution0 = new PascalDistribution(2667, 0.7448422121607388);
      int[] intArray0 = pascalDistribution0.sample(1);
      //  // Unstable assertion: assertArrayEquals(new int[] {917}, intArray0);
  }
@Test(timeout = 4000)
  public void test_0070()  throws Throwable  {
      BinomialDistribution binomialDistribution0 = new BinomialDistribution(27, 0.0);
      // Undeclared exception!
      try { 
        binomialDistribution0.sample((-1738));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-1,738)
         //
         verifyException("org.apache.commons.math.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test_0071()  throws Throwable  {
      ZipfDistribution zipfDistribution0 = new ZipfDistribution(2206, 2206);
      // Undeclared exception!
      zipfDistribution0.inverseCumulativeProbability(0.0);
  }

  @Test(timeout = 4000)
  public void test_0072()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(680, 680, 680);
      double double0 = hypergeometricDistribution0.cumulativeProbability(254, 904);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test_0073()  throws Throwable  {
      BinomialDistribution binomialDistribution0 = new BinomialDistribution(27, 0.0);
      int int0 = binomialDistribution0.sample();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test_0074()  throws Throwable  {
      ZipfDistribution zipfDistribution0 = new ZipfDistribution(21, 21);
      int int0 = zipfDistribution0.inverseCumulativeProbability(0.10085031312164949);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test_0075()  throws Throwable  {
      ZipfDistribution zipfDistribution0 = new ZipfDistribution(14, 1.0);
      int int0 = zipfDistribution0.inverseCumulativeProbability(1);
      assertEquals(14, int0);
  }

  @Test(timeout = 4000)
  public void test_0076()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(0.37974655628204346);
      int int0 = poissonDistribution0.inverseCumulativeProbability(0.37974655628204346);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test_0077()  throws Throwable  {
      PascalDistribution pascalDistribution0 = new PascalDistribution(1, 1);
      double double0 = pascalDistribution0.cumulativeProbability(1, 1);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test_0078()  throws Throwable  {
      PascalDistribution pascalDistribution0 = new PascalDistribution(1, 0.10085031312164949);
      pascalDistribution0.inverseCumulativeProbability(0.5248573870829962);
      // Undeclared exception!
      pascalDistribution0.sample(6);
  }

  @Test(timeout = 4000)
  public void test_0079()  throws Throwable  {
      ZipfDistribution zipfDistribution0 = new ZipfDistribution(16383, 16383);
      // Undeclared exception!
      zipfDistribution0.sample();
  }

  @Test(timeout = 4000)
  public void test_0080()  throws Throwable  {
      PascalDistribution pascalDistribution0 = new PascalDistribution(1, Double.NaN);
      // Undeclared exception!
      try { 
        pascalDistribution0.sample();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Discrete cumulative probability function returned NaN for argument 1,073,741,822
         //
         verifyException("org.apache.commons.math.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test_0081()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(0.6296771452022891, (-1));
      // Undeclared exception!
      try { 
        poissonDistribution0.inverseCumulativeProbability(0.6296771452022891);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (-1) exceeded
         //
         verifyException("org.apache.commons.math.special.Gamma", e);
      }
  }

  @Test(timeout = 4000)
  public void test_0082()  throws Throwable  {
      ZipfDistribution zipfDistribution0 = new ZipfDistribution(131070, Double.NaN);
      // Undeclared exception!
      zipfDistribution0.cumulativeProbability(131070, 131070);
  }

  @Test(timeout = 4000)
  public void test_0083()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution((double) 1823, (-2221));
      // Undeclared exception!
      try { 
        poissonDistribution0.cumulativeProbability(1, 1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Continued fraction convergents failed to converge (in less than -2,221 iterations) for value 1,823
         //
         verifyException("org.apache.commons.math.util.ContinuedFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test_0084()  throws Throwable  {
      PascalDistribution pascalDistribution0 = new PascalDistribution(942, 0.0);
      int int0 = pascalDistribution0.sample();
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test_0085()  throws Throwable  {
      PascalDistribution pascalDistribution0 = new PascalDistribution(0, 0);
      // Undeclared exception!
      try { 
        pascalDistribution0.sample(1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Discrete cumulative probability function returned NaN for argument 1,073,741,822
         //
         verifyException("org.apache.commons.math.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test_0086()  throws Throwable  {
      PascalDistribution pascalDistribution0 = new PascalDistribution(0, 0);
      // Undeclared exception!
      try { 
        pascalDistribution0.sample(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (0)
         //
         verifyException("org.apache.commons.math.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test_0087()  throws Throwable  {
      ZipfDistribution zipfDistribution0 = new ZipfDistribution(16383, 16383);
      // Undeclared exception!
      try { 
        zipfDistribution0.inverseCumulativeProbability(16383);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 16,383 out of [0, 1] range
         //
         verifyException("org.apache.commons.math.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test_0088()  throws Throwable  {
      PascalDistribution pascalDistribution0 = new PascalDistribution(1, 1);
      // Undeclared exception!
      try { 
        pascalDistribution0.inverseCumulativeProbability((-2212.02));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -2,212.02 out of [0, 1] range
         //
         verifyException("org.apache.commons.math.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test_0089()  throws Throwable  {
      PascalDistribution pascalDistribution0 = new PascalDistribution(1, 1);
      // Undeclared exception!
      try { 
        pascalDistribution0.cumulativeProbability(1, (-35658185));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lower endpoint (-35,658,185) must be less than or equal to upper endpoint (1)
         //
         verifyException("org.apache.commons.math.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test_0090()  throws Throwable  {
      ZipfDistribution zipfDistribution0 = new ZipfDistribution(21, 21);
      zipfDistribution0.reseedRandomGenerator(2546L);
      assertEquals(21, zipfDistribution0.getNumberOfElements());
  }

  @Test(timeout = 4000)
  public void test_0091()  throws Throwable  {
      PascalDistribution pascalDistribution0 = new PascalDistribution(6, 0.9026);
      pascalDistribution0.sample(6);
      // Undeclared exception!
      pascalDistribution0.inverseCumulativeProbability(0.3449094605260568);
  }
@Test(timeout = 4000)
  public void test_0092()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(1311.932594, 0.0, 0);
      // Undeclared exception!
      try { 
        poissonDistribution0.sample((-1594));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-1,594)
         //
         verifyException("org.apache.commons.math.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test_0093()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(4911, 4911, 2501);
      int int0 = hypergeometricDistribution0.inverseCumulativeProbability(1.0);
      assertEquals(2501, int0);
  }

  @Test(timeout = 4000)
  public void test_0094()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(4077.381551, 4077.381551, 3);
      int int0 = poissonDistribution0.inverseCumulativeProbability(0.0);
      assertEquals(1881, int0);
  }

  @Test(timeout = 4000)
  public void test_0095()  throws Throwable  {
      BinomialDistribution binomialDistribution0 = new BinomialDistribution(223, 0.0);
      double double0 = binomialDistribution0.cumulativeProbability(1, 223);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test_0096()  throws Throwable  {
      BinomialDistribution binomialDistribution0 = new BinomialDistribution(0, 0);
      int int0 = binomialDistribution0.sample();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test_0097()  throws Throwable  {
      BinomialDistribution binomialDistribution0 = new BinomialDistribution(43, 1.0);
      int int0 = binomialDistribution0.sample();
      assertEquals(43, int0);
  }

  @Test(timeout = 4000)
  public void test_0098()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(0.7036377348494958, 42.3066672);
      int int0 = poissonDistribution0.inverseCumulativeProbability(0.7036377348494958);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test_0099()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(1.0E-12);
      int int0 = poissonDistribution0.inverseCumulativeProbability(5.5822855204629114E-9);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test_0100()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(4911, 4911, 4911);
      double double0 = hypergeometricDistribution0.cumulativeProbability(4911, 4911);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test_0101()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(4911, 4911, 4911);
      // Undeclared exception!
      hypergeometricDistribution0.sample(4911);
  }

  @Test(timeout = 4000)
  public void test_0102()  throws Throwable  {
      PascalDistribution pascalDistribution0 = new PascalDistribution(0, 0);
      // Undeclared exception!
      try { 
        pascalDistribution0.sample(1250);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Discrete cumulative probability function returned NaN for argument 1,073,741,822
         //
         verifyException("org.apache.commons.math.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test_0103()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(0.45925575331799506, (-704.808));
      // Undeclared exception!
      poissonDistribution0.inverseCumulativeProbability(0.45925575331799506);
  }

  @Test(timeout = 4000)
  public void test_0104()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(Double.NaN);
      // Undeclared exception!
      try { 
        poissonDistribution0.inverseCumulativeProbability(1.0E-12);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Discrete cumulative probability function returned NaN for argument 1,073,741,823
         //
         verifyException("org.apache.commons.math.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test_0105()  throws Throwable  {
      ZipfDistribution zipfDistribution0 = new ZipfDistribution(10000000, 10000000);
      // Undeclared exception!
      zipfDistribution0.cumulativeProbability(4907, 10000000);
  }

  @Test(timeout = 4000)
  public void test_0106()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(0.7744914778359648, (-1374));
      // Undeclared exception!
      try { 
        poissonDistribution0.cumulativeProbability(3952, 3952);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (-1,374) exceeded
         //
         verifyException("org.apache.commons.math.special.Gamma", e);
      }
  }

  @Test(timeout = 4000)
  public void test_0107()  throws Throwable  {
      BinomialDistribution binomialDistribution0 = new BinomialDistribution(1870, Double.NaN);
      // Undeclared exception!
      try { 
        binomialDistribution0.sample();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Discrete cumulative probability function returned NaN for argument 934
         //
         verifyException("org.apache.commons.math.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test_0108()  throws Throwable  {
      BinomialDistribution binomialDistribution0 = new BinomialDistribution(0, 0);
      // Undeclared exception!
      try { 
        binomialDistribution0.sample(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (0)
         //
         verifyException("org.apache.commons.math.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test_0109()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(4077.381551, 4077.381551, 15);
      int[] intArray0 = poissonDistribution0.sample(2);
      assertArrayEquals(new int[] {4000, 4086}, intArray0);
  }

  @Test(timeout = 4000)
  public void test_0110()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(442.507);
      // Undeclared exception!
      try { 
        poissonDistribution0.inverseCumulativeProbability(442.507);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 442.507 out of [0, 1] range
         //
         verifyException("org.apache.commons.math.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test_0111()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(1870);
      // Undeclared exception!
      try { 
        poissonDistribution0.inverseCumulativeProbability((-235.830943151));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -235.831 out of [0, 1] range
         //
         verifyException("org.apache.commons.math.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test_0112()  throws Throwable  {
      BinomialDistribution binomialDistribution0 = new BinomialDistribution(0, 0);
      // Undeclared exception!
      try { 
        binomialDistribution0.cumulativeProbability(0, (-2757));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lower endpoint (-2,757) must be less than or equal to upper endpoint (0)
         //
         verifyException("org.apache.commons.math.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test_0113()  throws Throwable  {
      BinomialDistribution binomialDistribution0 = new BinomialDistribution(0, 0);
      binomialDistribution0.reseedRandomGenerator(0);
      assertEquals(0, binomialDistribution0.getNumberOfTrials());
  }

  @Test(timeout = 4000)
  public void test_0114()  throws Throwable  {
      BinomialDistribution binomialDistribution0 = new BinomialDistribution(Integer.MAX_VALUE, 1.0E-12);
      // Undeclared exception!
      binomialDistribution0.sample();
  }
}
